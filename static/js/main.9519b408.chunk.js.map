{"version":3,"sources":["App.tsx","diastic.ts","serviceWorker.ts","index.tsx"],"names":["Form","props","seed","setSeed","body","setBody","className","type","name","placeholder","value","onChange","event","target","App","useState","text","split","result","seen","Set","i","length","char","word","has","push","add","buildDiastic","join","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAgBA,SAASA,EAAKC,GAAa,IACjBC,EAAiCD,EAAjCC,KAAMC,EAA2BF,EAA3BE,QAASC,EAAkBH,EAAlBG,KAAMC,EAAYJ,EAAZI,QAC7B,OACE,yBAAKC,UAAU,QACb,2BACEC,KAAK,OACLC,KAAK,OACLF,UAAU,aACVG,YAAY,YACZC,MAAOR,EACPS,SAAU,SAAAC,GAAK,OAAIT,EAAQS,EAAMC,OAAOH,UACvC,IACH,6BACA,2BACEH,KAAK,OACLC,KAAK,OACLF,UAAU,aACVG,YAAY,YACZC,MAAON,EACPO,SAAU,SAAAC,GAAK,OAAIP,EAAQO,EAAMC,OAAOH,WAMjCI,MApCf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNb,EADM,KACAC,EADA,OAEWY,mBAAS,IAFpB,mBAENX,EAFM,KAEAC,EAFA,KAGb,OACE,yBAAKC,UAAU,OACb,kBAACN,EAAD,CAAME,KAAMA,EAAMC,QAASA,EAASC,KAAMA,EAAMC,QAASA,IACzD,yBAAKC,UAAU,cCXO,SAASJ,EAAcc,GAIjD,IAHA,IAAMZ,EAAOY,EAAKC,MAAM,OAClBC,EAAmB,GACnBC,EAAO,IAAIC,IACRC,EAAI,EAAGA,EAAInB,EAAKoB,OAAQD,IAAK,CACpC,IADoC,EAC9BE,EAAerB,EAAKmB,GADU,cAEnBjB,GAFmB,IAEpC,2BAAuB,CAAC,IAAfoB,EAAc,QACrB,GAAIA,EAAKH,KAAOE,IAASJ,EAAKM,IAAID,GAAO,CACvCN,EAAOQ,KAAKF,GACZL,EAAKQ,IAAIH,GACT,QANgC,8BAShCN,EAAOI,OAAS,IAAMD,GACxBH,EAAOQ,KAAKH,GAGhB,OAAOL,EDN0BU,CAAa1B,EAAME,GAAMyB,KAAK,QEC7CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9519b408.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { buildDiastic } from \"./diastic\";\n\nfunction App() {\n  const [seed, setSeed] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  return (\n    <div className=\"App\">\n      <Form seed={seed} setSeed={setSeed} body={body} setBody={setBody} />\n      <div className=\"App-header\">{buildDiastic(seed, body).join(\" \")}</div>\n    </div>\n  );\n}\n\nfunction Form(props: any) {\n  const { seed, setSeed, body, setBody } = props;\n  return (\n    <div className=\"Form\">\n      <input\n        type=\"text\"\n        name=\"seed\"\n        className=\"Form-input\"\n        placeholder=\"seed text\"\n        value={seed}\n        onChange={event => setSeed(event.target.value)}\n      />{\" \"}\n      <br />\n      <input\n        type=\"text\"\n        name=\"body\"\n        className=\"Form-input\"\n        placeholder=\"body text\"\n        value={body}\n        onChange={event => setBody(event.target.value)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","export const buildDiastic = function(seed: string, text: string): string[] {\n  const body = text.split(/\\W+/);\n  const result: string[] = [];\n  const seen = new Set();\n  for (let i = 0; i < seed.length; i++) {\n    const char: string = seed[i];\n    for (let word of body) {\n      if (word[i] === char && !seen.has(word)) {\n        result.push(word);\n        seen.add(word);\n        break;\n      }\n    }\n    if (result.length - 1 !== i) {\n      result.push(char);\n    }\n  }\n  return result;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}